// SegmentedControl

.SegmentedControl {
  display: inline-flex;
  background-color: var(--color-segmented-control-bg);
  // stylelint-disable-next-line primer/borders
  border-radius: var(--primer-borderRadius-medium, $border-radius);
  // stylelint-disable-next-line primer/box-shadow
  box-shadow: var(--primer-borderInset-thin, inset 0 0 0 $border-width) var(--color-border-default);
}

// Button -----------------------------------------

.SegmentedControl-button {
  position: relative;
  display: inline-flex;
  height: var(--primer-control-medium-size, 32px);
  // stylelint-disable-next-line primer/spacing
  padding: 0 var(--primer-control-medium-paddingInline-normal, 12px);
  // stylelint-disable-next-line primer/typography
  font-size: var(--primer-text-body-size-medium, $body-font-size);
  color: var(--color-fg-default);
  background-color: transparent;
  // stylelint-disable-next-line primer/borders
  border: var(--primer-borderWidth-thin, $border-width) $border-style transparent;
  // stylelint-disable-next-line primer/borders
  border-radius: var(--primer-borderRadius-medium, $border-radius);
  transition: border-color, background-color 180ms cubic-bezier(0.3, 0.1, 0.5, 1);
  align-items: center;
  justify-content: center;
  gap: var(--primer-control-medium-gap, $spacer-2);

  &:hover {
    background-color: var(--color-segmented-control-button-hover-bg);
    transition-duration: 120ms;
  }

  &:active {
    background-color: var(--color-segmented-control-button-active-bg);
    border-color: var(--color-segmented-control-button-active-border);
    transition-duration: 60ms;
  }

  // Selected

  &[aria-current='true'] {
    // stylelint-disable-next-line primer/typography
    font-weight: var(--base-text-weight-semibold, $font-weight-bold);
    background-color: var(--color-btn-bg);
    border-color: var(--color-segmented-control-button-selected-border);
  }

  // Divider

  // stylelint-disable-next-line scss/selector-no-redundant-nesting-selector
  & + .SegmentedControl-button::before {
    position: absolute;
    inset: var(--primer-borderWidth-thin, 1px) 0 0 calc(var(--primer-borderWidth-thin, 1px) * -1);
    height: var(--primer-text-body-size-large, 16px);
    // stylelint-disable-next-line primer/spacing
    margin-top: var(--primer-control-medium-paddingBlock, 6px);
    content: '';
    // stylelint-disable-next-line primer/borders
    border-left: var(--primer-borderWidth-thin, $border-width) $border-style var(--color-border-default);
    transition: border-color 180ms cubic-bezier(0.3, 0.1, 0.5, 1);
  }

  // Remove dividers

  &[aria-current='true'] + .SegmentedControl-button::before {
    border-color: transparent;
  }

  &:hover,
  &:active,
  &:focus-visible {
    &::before,
    + .SegmentedControl-button::before {
      border-color: transparent;
      transition-duration: 60ms;
    }
  }
}

// Leading visual -----------------------------------------

.SegmentedControl-leadingVisual {
  color: var(--color-fg-muted);
}

// Text -----------------------------------------

.SegmentedControl-text {
  // renders a visibly hidden "copy" of the text in bold, reserving box space for when text becomes bold on selected
  &[data-content]::before {
    display: block;
    height: 0;
    // stylelint-disable-next-line primer/typography
    font-weight: var(--base-text-weight-semibold, $font-weight-bold);
    visibility: hidden;
    content: attr(data-content);
  }
}

// Variants -----------------------------------------

// disabled
.SegmentedControl--disabled { // TODO: Replace with aria-disabled?
  .SegmentedControl-button {
    color: var(--color-primer-fg-disabled);
    pointer-events: none;
    cursor: default;

    &[aria-current='true'] {
      border-color: var(--color-border-default);
    }
  }

  .SegmentedControl-leadingVisual {
    color: var(--color-primer-fg-disabled);
  }
}

// fullWidth
.SegmentedControl--fullWidth {
  display: flex;

  .SegmentedControl-button {
    flex: 1;
  }
}

// Icon only
.SegmentedControl-button--iconOnly {
  width: var(--primer-control-medium-size, 32px);
  padding-right: 0;
  padding-left: 0;
}

// Icon only when narrow
@media (max-width: $width-md) { // TODO: use token
  .SegmentedControl--iconOnly-whenNarrow {
    .SegmentedControl-button {
      width: var(--primer-control-medium-size, 32px);
      padding-right: 0;
      padding-left: 0;
    }

    .SegmentedControl-text {
      display: none;
    }
  }
}

// Increase touch target
@media (pointer: coarse) {
  .SegmentedControl-button::after {
    @include minTouchTarget($min-height: var(--primer-control-minTarget-coarse, 44px));
  }
}
